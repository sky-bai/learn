package main

import "fmt"

// 1.函数式编程的介绍
// 当谈论 Go 语言的函数式编程时，通常是指使用函数作为一等公民，并且使用高阶函数和函数组合等技术来编写具有函数式风格的代码。下面是几个示例，展示了一些典型的函数式编程的概念和技术在 Go 语言中的应用：

// 高阶函数：在函数式编程中，高阶函数是指能够接受一个或多个函数作为参数，或者返回一个函数作为结果的函数。下面是一个示例，演示了在 Go 中如何实现一个高阶函数。

// 将两次函数结果相加
func addTwice(f func(int) int, x int) int {
	return f(x) + f(x)
}

func square(x int) int {
	return x * x
}

func main() {
	result := addTwice(square, 3)
	fmt.Println(result) // Output: 81
}

// 在上述示例中，applyTwice 函数接受一个函数 f 和一个整数 x，并将 f 应用于 x 两次。我们传递了 square 函数作为参数，并将其应用于数字 3，得到了结果 81。
// 高阶函数提供上层处理能力，可以将复杂的逻辑封装在函数中，然后将其作为参数传递给其他函数，这样可以简化代码，提高代码的可读性和可维护性。
// 函数作为参数，表示的就是一段逻辑，这段逻辑可以被复用，可以被传递，可以被组合，可以被替换，这就是函数式编程的核心思想。
