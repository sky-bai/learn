// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"learn/111_gorm_gen/model"
)

func newClueCheck(db *gorm.DB, opts ...gen.DOOption) clueCheck {
	_clueCheck := clueCheck{}

	_clueCheck.clueCheckDo.UseDB(db, opts...)
	_clueCheck.clueCheckDo.UseModel(&model.ClueCheck{})

	tableName := _clueCheck.clueCheckDo.TableName()
	_clueCheck.ALL = field.NewAsterisk(tableName)
	_clueCheck.ID = field.NewInt64(tableName, "id")
	_clueCheck.CreatedAt = field.NewTime(tableName, "created_at")
	_clueCheck.UpdatedAt = field.NewTime(tableName, "updated_at")
	_clueCheck.DeletedAt = field.NewField(tableName, "deleted_at")
	_clueCheck.AccountID = field.NewInt64(tableName, "account_id")
	_clueCheck.State = field.NewInt32(tableName, "state")
	_clueCheck.TaskID = field.NewString(tableName, "task_id")
	_clueCheck.Imei = field.NewString(tableName, "imei")
	_clueCheck.CrashLevel = field.NewBool(tableName, "crash_level")
	_clueCheck.Ts = field.NewInt64(tableName, "ts")
	_clueCheck.FileType = field.NewInt32(tableName, "fileType")
	_clueCheck.Camera = field.NewBool(tableName, "camera")
	_clueCheck.URL = field.NewString(tableName, "url")
	_clueCheck.Longitude = field.NewFloat64(tableName, "longitude")
	_clueCheck.Latitude = field.NewFloat64(tableName, "latitude")
	_clueCheck.EnterpriseID = field.NewString(tableName, "enterprise_id")
	_clueCheck.SubsidiaryID = field.NewInt64(tableName, "subsidiary_id")
	_clueCheck.ResID = field.NewString(tableName, "res_id")

	_clueCheck.fillFieldMap()

	return _clueCheck
}

type clueCheck struct {
	clueCheckDo

	ALL          field.Asterisk
	ID           field.Int64   // 主键Id
	CreatedAt    field.Time    // 创建时间
	UpdatedAt    field.Time    // 修改时间
	DeletedAt    field.Field   // 删除时间
	AccountID    field.Int64   // 审核人ID
	State        field.Int32   // 审核状态 1待审核 2是碰撞 3不是碰撞
	TaskID       field.String  // 任务Id
	Imei         field.String  // 设备imei
	CrashLevel   field.Bool    // 碰撞等级
	Ts           field.Int64   // 时间戳
	FileType     field.Int32   // 文件类型
	Camera       field.Bool    // 摄像头
	URL          field.String  // 文件链接
	Longitude    field.Float64 // 事故发生时的经度
	Latitude     field.Float64 // 事故发生时的纬度
	EnterpriseID field.String  // 集团id,主系统wid
	SubsidiaryID field.Int64   // 所属4S店
	ResID        field.String  // 线索唯一ID

	fieldMap map[string]field.Expr
}

func (c clueCheck) Table(newTableName string) *clueCheck {
	c.clueCheckDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c clueCheck) As(alias string) *clueCheck {
	c.clueCheckDo.DO = *(c.clueCheckDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *clueCheck) updateTableName(table string) *clueCheck {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.AccountID = field.NewInt64(table, "account_id")
	c.State = field.NewInt32(table, "state")
	c.TaskID = field.NewString(table, "task_id")
	c.Imei = field.NewString(table, "imei")
	c.CrashLevel = field.NewBool(table, "crash_level")
	c.Ts = field.NewInt64(table, "ts")
	c.FileType = field.NewInt32(table, "fileType")
	c.Camera = field.NewBool(table, "camera")
	c.URL = field.NewString(table, "url")
	c.Longitude = field.NewFloat64(table, "longitude")
	c.Latitude = field.NewFloat64(table, "latitude")
	c.EnterpriseID = field.NewString(table, "enterprise_id")
	c.SubsidiaryID = field.NewInt64(table, "subsidiary_id")
	c.ResID = field.NewString(table, "res_id")

	c.fillFieldMap()

	return c
}

func (c *clueCheck) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *clueCheck) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 18)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["account_id"] = c.AccountID
	c.fieldMap["state"] = c.State
	c.fieldMap["task_id"] = c.TaskID
	c.fieldMap["imei"] = c.Imei
	c.fieldMap["crash_level"] = c.CrashLevel
	c.fieldMap["ts"] = c.Ts
	c.fieldMap["fileType"] = c.FileType
	c.fieldMap["camera"] = c.Camera
	c.fieldMap["url"] = c.URL
	c.fieldMap["longitude"] = c.Longitude
	c.fieldMap["latitude"] = c.Latitude
	c.fieldMap["enterprise_id"] = c.EnterpriseID
	c.fieldMap["subsidiary_id"] = c.SubsidiaryID
	c.fieldMap["res_id"] = c.ResID
}

func (c clueCheck) clone(db *gorm.DB) clueCheck {
	c.clueCheckDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c clueCheck) replaceDB(db *gorm.DB) clueCheck {
	c.clueCheckDo.ReplaceDB(db)
	return c
}

type clueCheckDo struct{ gen.DO }

type IClueCheckDo interface {
	gen.SubQuery
	Debug() IClueCheckDo
	WithContext(ctx context.Context) IClueCheckDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IClueCheckDo
	WriteDB() IClueCheckDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IClueCheckDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IClueCheckDo
	Not(conds ...gen.Condition) IClueCheckDo
	Or(conds ...gen.Condition) IClueCheckDo
	Select(conds ...field.Expr) IClueCheckDo
	Where(conds ...gen.Condition) IClueCheckDo
	Order(conds ...field.Expr) IClueCheckDo
	Distinct(cols ...field.Expr) IClueCheckDo
	Omit(cols ...field.Expr) IClueCheckDo
	Join(table schema.Tabler, on ...field.Expr) IClueCheckDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IClueCheckDo
	RightJoin(table schema.Tabler, on ...field.Expr) IClueCheckDo
	Group(cols ...field.Expr) IClueCheckDo
	Having(conds ...gen.Condition) IClueCheckDo
	Limit(limit int) IClueCheckDo
	Offset(offset int) IClueCheckDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IClueCheckDo
	Unscoped() IClueCheckDo
	Create(values ...*model.ClueCheck) error
	CreateInBatches(values []*model.ClueCheck, batchSize int) error
	Save(values ...*model.ClueCheck) error
	First() (*model.ClueCheck, error)
	Take() (*model.ClueCheck, error)
	Last() (*model.ClueCheck, error)
	Find() ([]*model.ClueCheck, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ClueCheck, err error)
	FindInBatches(result *[]*model.ClueCheck, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ClueCheck) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IClueCheckDo
	Assign(attrs ...field.AssignExpr) IClueCheckDo
	Joins(fields ...field.RelationField) IClueCheckDo
	Preload(fields ...field.RelationField) IClueCheckDo
	FirstOrInit() (*model.ClueCheck, error)
	FirstOrCreate() (*model.ClueCheck, error)
	FindByPage(offset int, limit int) (result []*model.ClueCheck, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IClueCheckDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c clueCheckDo) Debug() IClueCheckDo {
	return c.withDO(c.DO.Debug())
}

func (c clueCheckDo) WithContext(ctx context.Context) IClueCheckDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c clueCheckDo) ReadDB() IClueCheckDo {
	return c.Clauses(dbresolver.Read)
}

func (c clueCheckDo) WriteDB() IClueCheckDo {
	return c.Clauses(dbresolver.Write)
}

func (c clueCheckDo) Session(config *gorm.Session) IClueCheckDo {
	return c.withDO(c.DO.Session(config))
}

func (c clueCheckDo) Clauses(conds ...clause.Expression) IClueCheckDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c clueCheckDo) Returning(value interface{}, columns ...string) IClueCheckDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c clueCheckDo) Not(conds ...gen.Condition) IClueCheckDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c clueCheckDo) Or(conds ...gen.Condition) IClueCheckDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c clueCheckDo) Select(conds ...field.Expr) IClueCheckDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c clueCheckDo) Where(conds ...gen.Condition) IClueCheckDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c clueCheckDo) Order(conds ...field.Expr) IClueCheckDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c clueCheckDo) Distinct(cols ...field.Expr) IClueCheckDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c clueCheckDo) Omit(cols ...field.Expr) IClueCheckDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c clueCheckDo) Join(table schema.Tabler, on ...field.Expr) IClueCheckDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c clueCheckDo) LeftJoin(table schema.Tabler, on ...field.Expr) IClueCheckDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c clueCheckDo) RightJoin(table schema.Tabler, on ...field.Expr) IClueCheckDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c clueCheckDo) Group(cols ...field.Expr) IClueCheckDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c clueCheckDo) Having(conds ...gen.Condition) IClueCheckDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c clueCheckDo) Limit(limit int) IClueCheckDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c clueCheckDo) Offset(offset int) IClueCheckDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c clueCheckDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IClueCheckDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c clueCheckDo) Unscoped() IClueCheckDo {
	return c.withDO(c.DO.Unscoped())
}

func (c clueCheckDo) Create(values ...*model.ClueCheck) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c clueCheckDo) CreateInBatches(values []*model.ClueCheck, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c clueCheckDo) Save(values ...*model.ClueCheck) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c clueCheckDo) First() (*model.ClueCheck, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClueCheck), nil
	}
}

func (c clueCheckDo) Take() (*model.ClueCheck, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClueCheck), nil
	}
}

func (c clueCheckDo) Last() (*model.ClueCheck, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClueCheck), nil
	}
}

func (c clueCheckDo) Find() ([]*model.ClueCheck, error) {
	result, err := c.DO.Find()
	return result.([]*model.ClueCheck), err
}

func (c clueCheckDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ClueCheck, err error) {
	buf := make([]*model.ClueCheck, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c clueCheckDo) FindInBatches(result *[]*model.ClueCheck, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c clueCheckDo) Attrs(attrs ...field.AssignExpr) IClueCheckDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c clueCheckDo) Assign(attrs ...field.AssignExpr) IClueCheckDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c clueCheckDo) Joins(fields ...field.RelationField) IClueCheckDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c clueCheckDo) Preload(fields ...field.RelationField) IClueCheckDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c clueCheckDo) FirstOrInit() (*model.ClueCheck, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClueCheck), nil
	}
}

func (c clueCheckDo) FirstOrCreate() (*model.ClueCheck, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClueCheck), nil
	}
}

func (c clueCheckDo) FindByPage(offset int, limit int) (result []*model.ClueCheck, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c clueCheckDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c clueCheckDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c clueCheckDo) Delete(models ...*model.ClueCheck) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *clueCheckDo) withDO(do gen.Dao) *clueCheckDo {
	c.DO = *do.(*gen.DO)
	return c
}
