// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"learn/111_gorm_gen/model"
)

func newClueCopy1(db *gorm.DB, opts ...gen.DOOption) clueCopy1 {
	_clueCopy1 := clueCopy1{}

	_clueCopy1.clueCopy1Do.UseDB(db, opts...)
	_clueCopy1.clueCopy1Do.UseModel(&model.ClueCopy1{})

	tableName := _clueCopy1.clueCopy1Do.TableName()
	_clueCopy1.ALL = field.NewAsterisk(tableName)
	_clueCopy1.ID = field.NewInt64(tableName, "id")
	_clueCopy1.CreatedAt = field.NewTime(tableName, "created_at")
	_clueCopy1.UpdatedAt = field.NewTime(tableName, "updated_at")
	_clueCopy1.DeletedAt = field.NewField(tableName, "deleted_at")
	_clueCopy1.Message = field.NewString(tableName, "message")
	_clueCopy1.Status = field.NewString(tableName, "status")
	_clueCopy1.UserID = field.NewInt64(tableName, "user_id")
	_clueCopy1.AccidentType = field.NewString(tableName, "accident_type")
	_clueCopy1.URL = field.NewString(tableName, "url")
	_clueCopy1.CarOwnerName = field.NewString(tableName, "car_owner_name")
	_clueCopy1.CarBrand = field.NewString(tableName, "car_brand")
	_clueCopy1.CarSeries = field.NewString(tableName, "car_series")
	_clueCopy1.CarPlant = field.NewString(tableName, "car_plant")
	_clueCopy1.CarOwnerPhone = field.NewString(tableName, "car_owner_phone")
	_clueCopy1.Vin = field.NewString(tableName, "vin")
	_clueCopy1.LicenseNumber = field.NewString(tableName, "license_number")
	_clueCopy1.CarType = field.NewString(tableName, "car_type")
	_clueCopy1.CrashLevel = field.NewString(tableName, "crash_level")
	_clueCopy1.Distance = field.NewFloat32(tableName, "distance")
	_clueCopy1.AccidentAt = field.NewTime(tableName, "accident_at")
	_clueCopy1.Longitude = field.NewFloat64(tableName, "longitude")
	_clueCopy1.Latitude = field.NewFloat64(tableName, "latitude")
	_clueCopy1.DealershipID = field.NewInt64(tableName, "dealership_id")
	_clueCopy1.DealershipName = field.NewString(tableName, "dealership_name")
	_clueCopy1.RecorderImei = field.NewString(tableName, "recorder_imei")
	_clueCopy1.LocationAccident = field.NewString(tableName, "location_accident")
	_clueCopy1.ContactPhone = field.NewString(tableName, "contact_phone")
	_clueCopy1.CarOwnerRegister = field.NewBool(tableName, "car_owner_register")

	_clueCopy1.fillFieldMap()

	return _clueCopy1
}

type clueCopy1 struct {
	clueCopy1Do

	ALL              field.Asterisk
	ID               field.Int64   // 主键Id
	CreatedAt        field.Time    // 创建时间
	UpdatedAt        field.Time    // 修改时间
	DeletedAt        field.Field   // 删除时间
	Message          field.String  // 线索信息
	Status           field.String  // 线索当前状态 新线索默认待处理，跟进中，有效，无效
	UserID           field.Int64   // 操作人ID
	AccidentType     field.String  // 事故类型
	URL              field.String  // 事故视频url
	CarOwnerName     field.String  // 车主姓名
	CarBrand         field.String  // 车的品牌
	CarSeries        field.String  // 车系
	CarPlant         field.String  // 车的主机厂
	CarOwnerPhone    field.String  // 车主名称
	Vin              field.String  // 车架号
	LicenseNumber    field.String  // 车牌号
	CarType          field.String  // 车型
	CrashLevel       field.String  // 碰撞等级
	Distance         field.Float32 // 距离4s店的距离
	AccidentAt       field.Time    // 事故触发时间
	Longitude        field.Float64 // 事故发生时的经度
	Latitude         field.Float64 // 事故发生时的纬度
	DealershipID     field.Int64   // 该条线索所归属的4s店
	DealershipName   field.String  // 该条线索所归属的4s店名称
	RecorderImei     field.String  // 记录仪的imei号
	LocationAccident field.String  // 事故发生时的地点
	ContactPhone     field.String  // 联系人
	CarOwnerRegister field.Bool    // 车主端是否注册

	fieldMap map[string]field.Expr
}

func (c clueCopy1) Table(newTableName string) *clueCopy1 {
	c.clueCopy1Do.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c clueCopy1) As(alias string) *clueCopy1 {
	c.clueCopy1Do.DO = *(c.clueCopy1Do.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *clueCopy1) updateTableName(table string) *clueCopy1 {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Message = field.NewString(table, "message")
	c.Status = field.NewString(table, "status")
	c.UserID = field.NewInt64(table, "user_id")
	c.AccidentType = field.NewString(table, "accident_type")
	c.URL = field.NewString(table, "url")
	c.CarOwnerName = field.NewString(table, "car_owner_name")
	c.CarBrand = field.NewString(table, "car_brand")
	c.CarSeries = field.NewString(table, "car_series")
	c.CarPlant = field.NewString(table, "car_plant")
	c.CarOwnerPhone = field.NewString(table, "car_owner_phone")
	c.Vin = field.NewString(table, "vin")
	c.LicenseNumber = field.NewString(table, "license_number")
	c.CarType = field.NewString(table, "car_type")
	c.CrashLevel = field.NewString(table, "crash_level")
	c.Distance = field.NewFloat32(table, "distance")
	c.AccidentAt = field.NewTime(table, "accident_at")
	c.Longitude = field.NewFloat64(table, "longitude")
	c.Latitude = field.NewFloat64(table, "latitude")
	c.DealershipID = field.NewInt64(table, "dealership_id")
	c.DealershipName = field.NewString(table, "dealership_name")
	c.RecorderImei = field.NewString(table, "recorder_imei")
	c.LocationAccident = field.NewString(table, "location_accident")
	c.ContactPhone = field.NewString(table, "contact_phone")
	c.CarOwnerRegister = field.NewBool(table, "car_owner_register")

	c.fillFieldMap()

	return c
}

func (c *clueCopy1) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *clueCopy1) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 28)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["message"] = c.Message
	c.fieldMap["status"] = c.Status
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["accident_type"] = c.AccidentType
	c.fieldMap["url"] = c.URL
	c.fieldMap["car_owner_name"] = c.CarOwnerName
	c.fieldMap["car_brand"] = c.CarBrand
	c.fieldMap["car_series"] = c.CarSeries
	c.fieldMap["car_plant"] = c.CarPlant
	c.fieldMap["car_owner_phone"] = c.CarOwnerPhone
	c.fieldMap["vin"] = c.Vin
	c.fieldMap["license_number"] = c.LicenseNumber
	c.fieldMap["car_type"] = c.CarType
	c.fieldMap["crash_level"] = c.CrashLevel
	c.fieldMap["distance"] = c.Distance
	c.fieldMap["accident_at"] = c.AccidentAt
	c.fieldMap["longitude"] = c.Longitude
	c.fieldMap["latitude"] = c.Latitude
	c.fieldMap["dealership_id"] = c.DealershipID
	c.fieldMap["dealership_name"] = c.DealershipName
	c.fieldMap["recorder_imei"] = c.RecorderImei
	c.fieldMap["location_accident"] = c.LocationAccident
	c.fieldMap["contact_phone"] = c.ContactPhone
	c.fieldMap["car_owner_register"] = c.CarOwnerRegister
}

func (c clueCopy1) clone(db *gorm.DB) clueCopy1 {
	c.clueCopy1Do.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c clueCopy1) replaceDB(db *gorm.DB) clueCopy1 {
	c.clueCopy1Do.ReplaceDB(db)
	return c
}

type clueCopy1Do struct{ gen.DO }

type IClueCopy1Do interface {
	gen.SubQuery
	Debug() IClueCopy1Do
	WithContext(ctx context.Context) IClueCopy1Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IClueCopy1Do
	WriteDB() IClueCopy1Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IClueCopy1Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IClueCopy1Do
	Not(conds ...gen.Condition) IClueCopy1Do
	Or(conds ...gen.Condition) IClueCopy1Do
	Select(conds ...field.Expr) IClueCopy1Do
	Where(conds ...gen.Condition) IClueCopy1Do
	Order(conds ...field.Expr) IClueCopy1Do
	Distinct(cols ...field.Expr) IClueCopy1Do
	Omit(cols ...field.Expr) IClueCopy1Do
	Join(table schema.Tabler, on ...field.Expr) IClueCopy1Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IClueCopy1Do
	RightJoin(table schema.Tabler, on ...field.Expr) IClueCopy1Do
	Group(cols ...field.Expr) IClueCopy1Do
	Having(conds ...gen.Condition) IClueCopy1Do
	Limit(limit int) IClueCopy1Do
	Offset(offset int) IClueCopy1Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IClueCopy1Do
	Unscoped() IClueCopy1Do
	Create(values ...*model.ClueCopy1) error
	CreateInBatches(values []*model.ClueCopy1, batchSize int) error
	Save(values ...*model.ClueCopy1) error
	First() (*model.ClueCopy1, error)
	Take() (*model.ClueCopy1, error)
	Last() (*model.ClueCopy1, error)
	Find() ([]*model.ClueCopy1, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ClueCopy1, err error)
	FindInBatches(result *[]*model.ClueCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ClueCopy1) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IClueCopy1Do
	Assign(attrs ...field.AssignExpr) IClueCopy1Do
	Joins(fields ...field.RelationField) IClueCopy1Do
	Preload(fields ...field.RelationField) IClueCopy1Do
	FirstOrInit() (*model.ClueCopy1, error)
	FirstOrCreate() (*model.ClueCopy1, error)
	FindByPage(offset int, limit int) (result []*model.ClueCopy1, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IClueCopy1Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c clueCopy1Do) Debug() IClueCopy1Do {
	return c.withDO(c.DO.Debug())
}

func (c clueCopy1Do) WithContext(ctx context.Context) IClueCopy1Do {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c clueCopy1Do) ReadDB() IClueCopy1Do {
	return c.Clauses(dbresolver.Read)
}

func (c clueCopy1Do) WriteDB() IClueCopy1Do {
	return c.Clauses(dbresolver.Write)
}

func (c clueCopy1Do) Session(config *gorm.Session) IClueCopy1Do {
	return c.withDO(c.DO.Session(config))
}

func (c clueCopy1Do) Clauses(conds ...clause.Expression) IClueCopy1Do {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c clueCopy1Do) Returning(value interface{}, columns ...string) IClueCopy1Do {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c clueCopy1Do) Not(conds ...gen.Condition) IClueCopy1Do {
	return c.withDO(c.DO.Not(conds...))
}

func (c clueCopy1Do) Or(conds ...gen.Condition) IClueCopy1Do {
	return c.withDO(c.DO.Or(conds...))
}

func (c clueCopy1Do) Select(conds ...field.Expr) IClueCopy1Do {
	return c.withDO(c.DO.Select(conds...))
}

func (c clueCopy1Do) Where(conds ...gen.Condition) IClueCopy1Do {
	return c.withDO(c.DO.Where(conds...))
}

func (c clueCopy1Do) Order(conds ...field.Expr) IClueCopy1Do {
	return c.withDO(c.DO.Order(conds...))
}

func (c clueCopy1Do) Distinct(cols ...field.Expr) IClueCopy1Do {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c clueCopy1Do) Omit(cols ...field.Expr) IClueCopy1Do {
	return c.withDO(c.DO.Omit(cols...))
}

func (c clueCopy1Do) Join(table schema.Tabler, on ...field.Expr) IClueCopy1Do {
	return c.withDO(c.DO.Join(table, on...))
}

func (c clueCopy1Do) LeftJoin(table schema.Tabler, on ...field.Expr) IClueCopy1Do {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c clueCopy1Do) RightJoin(table schema.Tabler, on ...field.Expr) IClueCopy1Do {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c clueCopy1Do) Group(cols ...field.Expr) IClueCopy1Do {
	return c.withDO(c.DO.Group(cols...))
}

func (c clueCopy1Do) Having(conds ...gen.Condition) IClueCopy1Do {
	return c.withDO(c.DO.Having(conds...))
}

func (c clueCopy1Do) Limit(limit int) IClueCopy1Do {
	return c.withDO(c.DO.Limit(limit))
}

func (c clueCopy1Do) Offset(offset int) IClueCopy1Do {
	return c.withDO(c.DO.Offset(offset))
}

func (c clueCopy1Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IClueCopy1Do {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c clueCopy1Do) Unscoped() IClueCopy1Do {
	return c.withDO(c.DO.Unscoped())
}

func (c clueCopy1Do) Create(values ...*model.ClueCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c clueCopy1Do) CreateInBatches(values []*model.ClueCopy1, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c clueCopy1Do) Save(values ...*model.ClueCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c clueCopy1Do) First() (*model.ClueCopy1, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClueCopy1), nil
	}
}

func (c clueCopy1Do) Take() (*model.ClueCopy1, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClueCopy1), nil
	}
}

func (c clueCopy1Do) Last() (*model.ClueCopy1, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClueCopy1), nil
	}
}

func (c clueCopy1Do) Find() ([]*model.ClueCopy1, error) {
	result, err := c.DO.Find()
	return result.([]*model.ClueCopy1), err
}

func (c clueCopy1Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ClueCopy1, err error) {
	buf := make([]*model.ClueCopy1, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c clueCopy1Do) FindInBatches(result *[]*model.ClueCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c clueCopy1Do) Attrs(attrs ...field.AssignExpr) IClueCopy1Do {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c clueCopy1Do) Assign(attrs ...field.AssignExpr) IClueCopy1Do {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c clueCopy1Do) Joins(fields ...field.RelationField) IClueCopy1Do {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c clueCopy1Do) Preload(fields ...field.RelationField) IClueCopy1Do {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c clueCopy1Do) FirstOrInit() (*model.ClueCopy1, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClueCopy1), nil
	}
}

func (c clueCopy1Do) FirstOrCreate() (*model.ClueCopy1, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClueCopy1), nil
	}
}

func (c clueCopy1Do) FindByPage(offset int, limit int) (result []*model.ClueCopy1, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c clueCopy1Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c clueCopy1Do) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c clueCopy1Do) Delete(models ...*model.ClueCopy1) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *clueCopy1Do) withDO(do gen.Dao) *clueCopy1Do {
	c.DO = *do.(*gen.DO)
	return c
}
