// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"learn/111_gorm_gen/model"
)

func newOfficialAccount(db *gorm.DB, opts ...gen.DOOption) officialAccount {
	_officialAccount := officialAccount{}

	_officialAccount.officialAccountDo.UseDB(db, opts...)
	_officialAccount.officialAccountDo.UseModel(&model.OfficialAccount{})

	tableName := _officialAccount.officialAccountDo.TableName()
	_officialAccount.ALL = field.NewAsterisk(tableName)
	_officialAccount.ID = field.NewInt64(tableName, "id")
	_officialAccount.CreatedAt = field.NewTime(tableName, "created_at")
	_officialAccount.UpdatedAt = field.NewTime(tableName, "updated_at")
	_officialAccount.DeletedAt = field.NewField(tableName, "deleted_at")
	_officialAccount.Customer = field.NewString(tableName, "customer")
	_officialAccount.Name = field.NewString(tableName, "name")
	_officialAccount.AppID = field.NewString(tableName, "app_Id")
	_officialAccount.AppSecret = field.NewString(tableName, "app_secret")
	_officialAccount.JsToken = field.NewString(tableName, "js_token")
	_officialAccount.AccessToken = field.NewString(tableName, "access_token")
	_officialAccount.AccessTokenUpdateTime = field.NewTime(tableName, "access_token_update_time")
	_officialAccount.URL = field.NewString(tableName, "url")
	_officialAccount.ServerToken = field.NewString(tableName, "server_token")
	_officialAccount.EncodingAesKey = field.NewString(tableName, "encoding_aes_key")
	_officialAccount.AppIDAlias = field.NewString(tableName, "app_Id_alias")
	_officialAccount.WhiteIP = field.NewString(tableName, "white_ip")
	_officialAccount.Token = field.NewString(tableName, "token")

	_officialAccount.fillFieldMap()

	return _officialAccount
}

type officialAccount struct {
	officialAccountDo

	ALL                   field.Asterisk
	ID                    field.Int64 // 主键Id
	CreatedAt             field.Time  // 创建时间
	UpdatedAt             field.Time  // 修改时间
	DeletedAt             field.Field // 删除时间
	Customer              field.String
	Name                  field.String
	AppID                 field.String
	AppSecret             field.String
	JsToken               field.String
	AccessToken           field.String
	AccessTokenUpdateTime field.Time
	URL                   field.String
	ServerToken           field.String
	EncodingAesKey        field.String
	AppIDAlias            field.String // appId的别名
	WhiteIP               field.String // 白名单
	Token                 field.String

	fieldMap map[string]field.Expr
}

func (o officialAccount) Table(newTableName string) *officialAccount {
	o.officialAccountDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o officialAccount) As(alias string) *officialAccount {
	o.officialAccountDo.DO = *(o.officialAccountDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *officialAccount) updateTableName(table string) *officialAccount {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.DeletedAt = field.NewField(table, "deleted_at")
	o.Customer = field.NewString(table, "customer")
	o.Name = field.NewString(table, "name")
	o.AppID = field.NewString(table, "app_Id")
	o.AppSecret = field.NewString(table, "app_secret")
	o.JsToken = field.NewString(table, "js_token")
	o.AccessToken = field.NewString(table, "access_token")
	o.AccessTokenUpdateTime = field.NewTime(table, "access_token_update_time")
	o.URL = field.NewString(table, "url")
	o.ServerToken = field.NewString(table, "server_token")
	o.EncodingAesKey = field.NewString(table, "encoding_aes_key")
	o.AppIDAlias = field.NewString(table, "app_Id_alias")
	o.WhiteIP = field.NewString(table, "white_ip")
	o.Token = field.NewString(table, "token")

	o.fillFieldMap()

	return o
}

func (o *officialAccount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *officialAccount) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 17)
	o.fieldMap["id"] = o.ID
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["customer"] = o.Customer
	o.fieldMap["name"] = o.Name
	o.fieldMap["app_Id"] = o.AppID
	o.fieldMap["app_secret"] = o.AppSecret
	o.fieldMap["js_token"] = o.JsToken
	o.fieldMap["access_token"] = o.AccessToken
	o.fieldMap["access_token_update_time"] = o.AccessTokenUpdateTime
	o.fieldMap["url"] = o.URL
	o.fieldMap["server_token"] = o.ServerToken
	o.fieldMap["encoding_aes_key"] = o.EncodingAesKey
	o.fieldMap["app_Id_alias"] = o.AppIDAlias
	o.fieldMap["white_ip"] = o.WhiteIP
	o.fieldMap["token"] = o.Token
}

func (o officialAccount) clone(db *gorm.DB) officialAccount {
	o.officialAccountDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o officialAccount) replaceDB(db *gorm.DB) officialAccount {
	o.officialAccountDo.ReplaceDB(db)
	return o
}

type officialAccountDo struct{ gen.DO }

type IOfficialAccountDo interface {
	gen.SubQuery
	Debug() IOfficialAccountDo
	WithContext(ctx context.Context) IOfficialAccountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOfficialAccountDo
	WriteDB() IOfficialAccountDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOfficialAccountDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOfficialAccountDo
	Not(conds ...gen.Condition) IOfficialAccountDo
	Or(conds ...gen.Condition) IOfficialAccountDo
	Select(conds ...field.Expr) IOfficialAccountDo
	Where(conds ...gen.Condition) IOfficialAccountDo
	Order(conds ...field.Expr) IOfficialAccountDo
	Distinct(cols ...field.Expr) IOfficialAccountDo
	Omit(cols ...field.Expr) IOfficialAccountDo
	Join(table schema.Tabler, on ...field.Expr) IOfficialAccountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOfficialAccountDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOfficialAccountDo
	Group(cols ...field.Expr) IOfficialAccountDo
	Having(conds ...gen.Condition) IOfficialAccountDo
	Limit(limit int) IOfficialAccountDo
	Offset(offset int) IOfficialAccountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOfficialAccountDo
	Unscoped() IOfficialAccountDo
	Create(values ...*model.OfficialAccount) error
	CreateInBatches(values []*model.OfficialAccount, batchSize int) error
	Save(values ...*model.OfficialAccount) error
	First() (*model.OfficialAccount, error)
	Take() (*model.OfficialAccount, error)
	Last() (*model.OfficialAccount, error)
	Find() ([]*model.OfficialAccount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OfficialAccount, err error)
	FindInBatches(result *[]*model.OfficialAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OfficialAccount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOfficialAccountDo
	Assign(attrs ...field.AssignExpr) IOfficialAccountDo
	Joins(fields ...field.RelationField) IOfficialAccountDo
	Preload(fields ...field.RelationField) IOfficialAccountDo
	FirstOrInit() (*model.OfficialAccount, error)
	FirstOrCreate() (*model.OfficialAccount, error)
	FindByPage(offset int, limit int) (result []*model.OfficialAccount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOfficialAccountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o officialAccountDo) Debug() IOfficialAccountDo {
	return o.withDO(o.DO.Debug())
}

func (o officialAccountDo) WithContext(ctx context.Context) IOfficialAccountDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o officialAccountDo) ReadDB() IOfficialAccountDo {
	return o.Clauses(dbresolver.Read)
}

func (o officialAccountDo) WriteDB() IOfficialAccountDo {
	return o.Clauses(dbresolver.Write)
}

func (o officialAccountDo) Session(config *gorm.Session) IOfficialAccountDo {
	return o.withDO(o.DO.Session(config))
}

func (o officialAccountDo) Clauses(conds ...clause.Expression) IOfficialAccountDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o officialAccountDo) Returning(value interface{}, columns ...string) IOfficialAccountDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o officialAccountDo) Not(conds ...gen.Condition) IOfficialAccountDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o officialAccountDo) Or(conds ...gen.Condition) IOfficialAccountDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o officialAccountDo) Select(conds ...field.Expr) IOfficialAccountDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o officialAccountDo) Where(conds ...gen.Condition) IOfficialAccountDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o officialAccountDo) Order(conds ...field.Expr) IOfficialAccountDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o officialAccountDo) Distinct(cols ...field.Expr) IOfficialAccountDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o officialAccountDo) Omit(cols ...field.Expr) IOfficialAccountDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o officialAccountDo) Join(table schema.Tabler, on ...field.Expr) IOfficialAccountDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o officialAccountDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOfficialAccountDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o officialAccountDo) RightJoin(table schema.Tabler, on ...field.Expr) IOfficialAccountDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o officialAccountDo) Group(cols ...field.Expr) IOfficialAccountDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o officialAccountDo) Having(conds ...gen.Condition) IOfficialAccountDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o officialAccountDo) Limit(limit int) IOfficialAccountDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o officialAccountDo) Offset(offset int) IOfficialAccountDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o officialAccountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOfficialAccountDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o officialAccountDo) Unscoped() IOfficialAccountDo {
	return o.withDO(o.DO.Unscoped())
}

func (o officialAccountDo) Create(values ...*model.OfficialAccount) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o officialAccountDo) CreateInBatches(values []*model.OfficialAccount, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o officialAccountDo) Save(values ...*model.OfficialAccount) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o officialAccountDo) First() (*model.OfficialAccount, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OfficialAccount), nil
	}
}

func (o officialAccountDo) Take() (*model.OfficialAccount, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OfficialAccount), nil
	}
}

func (o officialAccountDo) Last() (*model.OfficialAccount, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OfficialAccount), nil
	}
}

func (o officialAccountDo) Find() ([]*model.OfficialAccount, error) {
	result, err := o.DO.Find()
	return result.([]*model.OfficialAccount), err
}

func (o officialAccountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OfficialAccount, err error) {
	buf := make([]*model.OfficialAccount, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o officialAccountDo) FindInBatches(result *[]*model.OfficialAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o officialAccountDo) Attrs(attrs ...field.AssignExpr) IOfficialAccountDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o officialAccountDo) Assign(attrs ...field.AssignExpr) IOfficialAccountDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o officialAccountDo) Joins(fields ...field.RelationField) IOfficialAccountDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o officialAccountDo) Preload(fields ...field.RelationField) IOfficialAccountDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o officialAccountDo) FirstOrInit() (*model.OfficialAccount, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OfficialAccount), nil
	}
}

func (o officialAccountDo) FirstOrCreate() (*model.OfficialAccount, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OfficialAccount), nil
	}
}

func (o officialAccountDo) FindByPage(offset int, limit int) (result []*model.OfficialAccount, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o officialAccountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o officialAccountDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o officialAccountDo) Delete(models ...*model.OfficialAccount) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *officialAccountDo) withDO(do gen.Dao) *officialAccountDo {
	o.DO = *do.(*gen.DO)
	return o
}
