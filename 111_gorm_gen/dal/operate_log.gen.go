// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"learn/111_gorm_gen/model"
)

func newOperateLog(db *gorm.DB, opts ...gen.DOOption) operateLog {
	_operateLog := operateLog{}

	_operateLog.operateLogDo.UseDB(db, opts...)
	_operateLog.operateLogDo.UseModel(&model.OperateLog{})

	tableName := _operateLog.operateLogDo.TableName()
	_operateLog.ALL = field.NewAsterisk(tableName)
	_operateLog.ID = field.NewInt64(tableName, "id")
	_operateLog.CreatedAt = field.NewTime(tableName, "created_at")
	_operateLog.UpdatedAt = field.NewTime(tableName, "updated_at")
	_operateLog.DeletedAt = field.NewField(tableName, "deleted_at")
	_operateLog.OperateType = field.NewString(tableName, "operate_type")
	_operateLog.AccountID = field.NewInt64(tableName, "account_id")
	_operateLog.OperateDetail = field.NewString(tableName, "operate_detail")
	_operateLog.FileDesensitize = field.NewBool(tableName, "file_desensitize")
	_operateLog.FileName = field.NewString(tableName, "file_name")
	_operateLog.ExportStatus = field.NewBool(tableName, "export_status")

	_operateLog.fillFieldMap()

	return _operateLog
}

type operateLog struct {
	operateLogDo

	ALL             field.Asterisk
	ID              field.Int64  // 主键Id
	CreatedAt       field.Time   // 创建时间
	UpdatedAt       field.Time   // 修改时间
	DeletedAt       field.Field  // 删除时间
	OperateType     field.String // 操作类型
	AccountID       field.Int64  // 操作人ID
	OperateDetail   field.String // 操作详情
	FileDesensitize field.Bool   // 文件是否脱敏
	FileName        field.String // 文件名称
	ExportStatus    field.Bool   // 导出状态

	fieldMap map[string]field.Expr
}

func (o operateLog) Table(newTableName string) *operateLog {
	o.operateLogDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o operateLog) As(alias string) *operateLog {
	o.operateLogDo.DO = *(o.operateLogDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *operateLog) updateTableName(table string) *operateLog {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.DeletedAt = field.NewField(table, "deleted_at")
	o.OperateType = field.NewString(table, "operate_type")
	o.AccountID = field.NewInt64(table, "account_id")
	o.OperateDetail = field.NewString(table, "operate_detail")
	o.FileDesensitize = field.NewBool(table, "file_desensitize")
	o.FileName = field.NewString(table, "file_name")
	o.ExportStatus = field.NewBool(table, "export_status")

	o.fillFieldMap()

	return o
}

func (o *operateLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *operateLog) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 10)
	o.fieldMap["id"] = o.ID
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["operate_type"] = o.OperateType
	o.fieldMap["account_id"] = o.AccountID
	o.fieldMap["operate_detail"] = o.OperateDetail
	o.fieldMap["file_desensitize"] = o.FileDesensitize
	o.fieldMap["file_name"] = o.FileName
	o.fieldMap["export_status"] = o.ExportStatus
}

func (o operateLog) clone(db *gorm.DB) operateLog {
	o.operateLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o operateLog) replaceDB(db *gorm.DB) operateLog {
	o.operateLogDo.ReplaceDB(db)
	return o
}

type operateLogDo struct{ gen.DO }

type IOperateLogDo interface {
	gen.SubQuery
	Debug() IOperateLogDo
	WithContext(ctx context.Context) IOperateLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOperateLogDo
	WriteDB() IOperateLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOperateLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOperateLogDo
	Not(conds ...gen.Condition) IOperateLogDo
	Or(conds ...gen.Condition) IOperateLogDo
	Select(conds ...field.Expr) IOperateLogDo
	Where(conds ...gen.Condition) IOperateLogDo
	Order(conds ...field.Expr) IOperateLogDo
	Distinct(cols ...field.Expr) IOperateLogDo
	Omit(cols ...field.Expr) IOperateLogDo
	Join(table schema.Tabler, on ...field.Expr) IOperateLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOperateLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOperateLogDo
	Group(cols ...field.Expr) IOperateLogDo
	Having(conds ...gen.Condition) IOperateLogDo
	Limit(limit int) IOperateLogDo
	Offset(offset int) IOperateLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOperateLogDo
	Unscoped() IOperateLogDo
	Create(values ...*model.OperateLog) error
	CreateInBatches(values []*model.OperateLog, batchSize int) error
	Save(values ...*model.OperateLog) error
	First() (*model.OperateLog, error)
	Take() (*model.OperateLog, error)
	Last() (*model.OperateLog, error)
	Find() ([]*model.OperateLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OperateLog, err error)
	FindInBatches(result *[]*model.OperateLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OperateLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOperateLogDo
	Assign(attrs ...field.AssignExpr) IOperateLogDo
	Joins(fields ...field.RelationField) IOperateLogDo
	Preload(fields ...field.RelationField) IOperateLogDo
	FirstOrInit() (*model.OperateLog, error)
	FirstOrCreate() (*model.OperateLog, error)
	FindByPage(offset int, limit int) (result []*model.OperateLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOperateLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o operateLogDo) Debug() IOperateLogDo {
	return o.withDO(o.DO.Debug())
}

func (o operateLogDo) WithContext(ctx context.Context) IOperateLogDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o operateLogDo) ReadDB() IOperateLogDo {
	return o.Clauses(dbresolver.Read)
}

func (o operateLogDo) WriteDB() IOperateLogDo {
	return o.Clauses(dbresolver.Write)
}

func (o operateLogDo) Session(config *gorm.Session) IOperateLogDo {
	return o.withDO(o.DO.Session(config))
}

func (o operateLogDo) Clauses(conds ...clause.Expression) IOperateLogDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o operateLogDo) Returning(value interface{}, columns ...string) IOperateLogDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o operateLogDo) Not(conds ...gen.Condition) IOperateLogDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o operateLogDo) Or(conds ...gen.Condition) IOperateLogDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o operateLogDo) Select(conds ...field.Expr) IOperateLogDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o operateLogDo) Where(conds ...gen.Condition) IOperateLogDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o operateLogDo) Order(conds ...field.Expr) IOperateLogDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o operateLogDo) Distinct(cols ...field.Expr) IOperateLogDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o operateLogDo) Omit(cols ...field.Expr) IOperateLogDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o operateLogDo) Join(table schema.Tabler, on ...field.Expr) IOperateLogDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o operateLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOperateLogDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o operateLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IOperateLogDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o operateLogDo) Group(cols ...field.Expr) IOperateLogDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o operateLogDo) Having(conds ...gen.Condition) IOperateLogDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o operateLogDo) Limit(limit int) IOperateLogDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o operateLogDo) Offset(offset int) IOperateLogDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o operateLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOperateLogDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o operateLogDo) Unscoped() IOperateLogDo {
	return o.withDO(o.DO.Unscoped())
}

func (o operateLogDo) Create(values ...*model.OperateLog) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o operateLogDo) CreateInBatches(values []*model.OperateLog, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o operateLogDo) Save(values ...*model.OperateLog) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o operateLogDo) First() (*model.OperateLog, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OperateLog), nil
	}
}

func (o operateLogDo) Take() (*model.OperateLog, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OperateLog), nil
	}
}

func (o operateLogDo) Last() (*model.OperateLog, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OperateLog), nil
	}
}

func (o operateLogDo) Find() ([]*model.OperateLog, error) {
	result, err := o.DO.Find()
	return result.([]*model.OperateLog), err
}

func (o operateLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OperateLog, err error) {
	buf := make([]*model.OperateLog, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o operateLogDo) FindInBatches(result *[]*model.OperateLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o operateLogDo) Attrs(attrs ...field.AssignExpr) IOperateLogDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o operateLogDo) Assign(attrs ...field.AssignExpr) IOperateLogDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o operateLogDo) Joins(fields ...field.RelationField) IOperateLogDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o operateLogDo) Preload(fields ...field.RelationField) IOperateLogDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o operateLogDo) FirstOrInit() (*model.OperateLog, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OperateLog), nil
	}
}

func (o operateLogDo) FirstOrCreate() (*model.OperateLog, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OperateLog), nil
	}
}

func (o operateLogDo) FindByPage(offset int, limit int) (result []*model.OperateLog, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o operateLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o operateLogDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o operateLogDo) Delete(models ...*model.OperateLog) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *operateLogDo) withDO(do gen.Dao) *operateLogDo {
	o.DO = *do.(*gen.DO)
	return o
}
