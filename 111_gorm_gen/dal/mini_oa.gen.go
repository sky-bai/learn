// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"learn/111_gorm_gen/model"
)

func newMiniOa(db *gorm.DB, opts ...gen.DOOption) miniOa {
	_miniOa := miniOa{}

	_miniOa.miniOaDo.UseDB(db, opts...)
	_miniOa.miniOaDo.UseModel(&model.MiniOa{})

	tableName := _miniOa.miniOaDo.TableName()
	_miniOa.ALL = field.NewAsterisk(tableName)
	_miniOa.ID = field.NewInt64(tableName, "id")
	_miniOa.MiniID = field.NewInt64(tableName, "mini_id")
	_miniOa.OaID = field.NewInt64(tableName, "oa_id")

	_miniOa.fillFieldMap()

	return _miniOa
}

type miniOa struct {
	miniOaDo

	ALL    field.Asterisk
	ID     field.Int64 // 主键Id
	MiniID field.Int64
	OaID   field.Int64

	fieldMap map[string]field.Expr
}

func (m miniOa) Table(newTableName string) *miniOa {
	m.miniOaDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m miniOa) As(alias string) *miniOa {
	m.miniOaDo.DO = *(m.miniOaDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *miniOa) updateTableName(table string) *miniOa {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.MiniID = field.NewInt64(table, "mini_id")
	m.OaID = field.NewInt64(table, "oa_id")

	m.fillFieldMap()

	return m
}

func (m *miniOa) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *miniOa) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 3)
	m.fieldMap["id"] = m.ID
	m.fieldMap["mini_id"] = m.MiniID
	m.fieldMap["oa_id"] = m.OaID
}

func (m miniOa) clone(db *gorm.DB) miniOa {
	m.miniOaDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m miniOa) replaceDB(db *gorm.DB) miniOa {
	m.miniOaDo.ReplaceDB(db)
	return m
}

type miniOaDo struct{ gen.DO }

type IMiniOaDo interface {
	gen.SubQuery
	Debug() IMiniOaDo
	WithContext(ctx context.Context) IMiniOaDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMiniOaDo
	WriteDB() IMiniOaDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMiniOaDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMiniOaDo
	Not(conds ...gen.Condition) IMiniOaDo
	Or(conds ...gen.Condition) IMiniOaDo
	Select(conds ...field.Expr) IMiniOaDo
	Where(conds ...gen.Condition) IMiniOaDo
	Order(conds ...field.Expr) IMiniOaDo
	Distinct(cols ...field.Expr) IMiniOaDo
	Omit(cols ...field.Expr) IMiniOaDo
	Join(table schema.Tabler, on ...field.Expr) IMiniOaDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMiniOaDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMiniOaDo
	Group(cols ...field.Expr) IMiniOaDo
	Having(conds ...gen.Condition) IMiniOaDo
	Limit(limit int) IMiniOaDo
	Offset(offset int) IMiniOaDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMiniOaDo
	Unscoped() IMiniOaDo
	Create(values ...*model.MiniOa) error
	CreateInBatches(values []*model.MiniOa, batchSize int) error
	Save(values ...*model.MiniOa) error
	First() (*model.MiniOa, error)
	Take() (*model.MiniOa, error)
	Last() (*model.MiniOa, error)
	Find() ([]*model.MiniOa, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MiniOa, err error)
	FindInBatches(result *[]*model.MiniOa, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MiniOa) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMiniOaDo
	Assign(attrs ...field.AssignExpr) IMiniOaDo
	Joins(fields ...field.RelationField) IMiniOaDo
	Preload(fields ...field.RelationField) IMiniOaDo
	FirstOrInit() (*model.MiniOa, error)
	FirstOrCreate() (*model.MiniOa, error)
	FindByPage(offset int, limit int) (result []*model.MiniOa, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMiniOaDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m miniOaDo) Debug() IMiniOaDo {
	return m.withDO(m.DO.Debug())
}

func (m miniOaDo) WithContext(ctx context.Context) IMiniOaDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m miniOaDo) ReadDB() IMiniOaDo {
	return m.Clauses(dbresolver.Read)
}

func (m miniOaDo) WriteDB() IMiniOaDo {
	return m.Clauses(dbresolver.Write)
}

func (m miniOaDo) Session(config *gorm.Session) IMiniOaDo {
	return m.withDO(m.DO.Session(config))
}

func (m miniOaDo) Clauses(conds ...clause.Expression) IMiniOaDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m miniOaDo) Returning(value interface{}, columns ...string) IMiniOaDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m miniOaDo) Not(conds ...gen.Condition) IMiniOaDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m miniOaDo) Or(conds ...gen.Condition) IMiniOaDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m miniOaDo) Select(conds ...field.Expr) IMiniOaDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m miniOaDo) Where(conds ...gen.Condition) IMiniOaDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m miniOaDo) Order(conds ...field.Expr) IMiniOaDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m miniOaDo) Distinct(cols ...field.Expr) IMiniOaDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m miniOaDo) Omit(cols ...field.Expr) IMiniOaDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m miniOaDo) Join(table schema.Tabler, on ...field.Expr) IMiniOaDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m miniOaDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMiniOaDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m miniOaDo) RightJoin(table schema.Tabler, on ...field.Expr) IMiniOaDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m miniOaDo) Group(cols ...field.Expr) IMiniOaDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m miniOaDo) Having(conds ...gen.Condition) IMiniOaDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m miniOaDo) Limit(limit int) IMiniOaDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m miniOaDo) Offset(offset int) IMiniOaDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m miniOaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMiniOaDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m miniOaDo) Unscoped() IMiniOaDo {
	return m.withDO(m.DO.Unscoped())
}

func (m miniOaDo) Create(values ...*model.MiniOa) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m miniOaDo) CreateInBatches(values []*model.MiniOa, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m miniOaDo) Save(values ...*model.MiniOa) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m miniOaDo) First() (*model.MiniOa, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MiniOa), nil
	}
}

func (m miniOaDo) Take() (*model.MiniOa, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MiniOa), nil
	}
}

func (m miniOaDo) Last() (*model.MiniOa, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MiniOa), nil
	}
}

func (m miniOaDo) Find() ([]*model.MiniOa, error) {
	result, err := m.DO.Find()
	return result.([]*model.MiniOa), err
}

func (m miniOaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MiniOa, err error) {
	buf := make([]*model.MiniOa, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m miniOaDo) FindInBatches(result *[]*model.MiniOa, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m miniOaDo) Attrs(attrs ...field.AssignExpr) IMiniOaDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m miniOaDo) Assign(attrs ...field.AssignExpr) IMiniOaDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m miniOaDo) Joins(fields ...field.RelationField) IMiniOaDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m miniOaDo) Preload(fields ...field.RelationField) IMiniOaDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m miniOaDo) FirstOrInit() (*model.MiniOa, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MiniOa), nil
	}
}

func (m miniOaDo) FirstOrCreate() (*model.MiniOa, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MiniOa), nil
	}
}

func (m miniOaDo) FindByPage(offset int, limit int) (result []*model.MiniOa, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m miniOaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m miniOaDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m miniOaDo) Delete(models ...*model.MiniOa) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *miniOaDo) withDO(do gen.Dao) *miniOaDo {
	m.DO = *do.(*gen.DO)
	return m
}
